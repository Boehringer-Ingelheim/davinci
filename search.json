[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DaVinci",
    "section": "",
    "text": "DaVinci provides tools to review, aggregate and visualize data to develop and deliver safe and effective treatments for patients. Instead of creating entire R/Shiny applications, DaVinci provides individual modules. Modules are functional building blocks that can be linked together into customized apps. This customization enables App Creators to build their own app according to trial-specific needs without deep R knowledge. The concept of developing loosely coupled, functional units and composing them into a larger application is subsequently referred to as modular approach.\n\n\n\nTo create an app, you need to first identify which modules to include. Consider each DaVinci module as individual building stone that you can put together to build a vehicle for a certain purpose. If you want to go fast, build a motorcycle, but if distance is your goal, build a regular car. The constructed vehicle symbolizes the DaVinci app that you create according to your use case.\n\n\n\n\n\nDaVinci modules are provided as R packages, with each package containing one or multiple modules. Choose the modules freely according to the purpose of your visualization. For instance, while a heatmap may not be necessary for data cleaning, it could be useful for biomarker analyses. Safety review might benefit from an eDISH plot, and listings are likely to be needed in all use cases. These are only examples, modules can be combined as needed. Some modules even have the capability to interact with each other.\nGetting Started explains what requriments need to be met and how to actual create an app.\nDaVinci Modules shows a complete list of all DaVinci modules.\n\n\n\n\nYour browser does not support the video tag."
  },
  {
    "objectID": "index.html#dynamic-visualization-for-clinical-insights-davinci",
    "href": "index.html#dynamic-visualization-for-clinical-insights-davinci",
    "title": "DaVinci",
    "section": "",
    "text": "DaVinci provides tools to review, aggregate and visualize data to develop and deliver safe and effective treatments for patients. Instead of creating entire R/Shiny applications, DaVinci provides individual modules. Modules are functional building blocks that can be linked together into customized apps. This customization enables App Creators to build their own app according to trial-specific needs without deep R knowledge. The concept of developing loosely coupled, functional units and composing them into a larger application is subsequently referred to as modular approach.\n\n\n\nTo create an app, you need to first identify which modules to include. Consider each DaVinci module as individual building stone that you can put together to build a vehicle for a certain purpose. If you want to go fast, build a motorcycle, but if distance is your goal, build a regular car. The constructed vehicle symbolizes the DaVinci app that you create according to your use case.\n\n\n\n\n\nDaVinci modules are provided as R packages, with each package containing one or multiple modules. Choose the modules freely according to the purpose of your visualization. For instance, while a heatmap may not be necessary for data cleaning, it could be useful for biomarker analyses. Safety review might benefit from an eDISH plot, and listings are likely to be needed in all use cases. These are only examples, modules can be combined as needed. Some modules even have the capability to interact with each other.\nGetting Started explains what requriments need to be met and how to actual create an app.\nDaVinci Modules shows a complete list of all DaVinci modules.\n\n\n\n\nYour browser does not support the video tag."
  },
  {
    "objectID": "quarto/getting_started.html",
    "href": "quarto/getting_started.html",
    "title": "Getting Started",
    "section": "",
    "text": "Please ensure that R version 4.0.0 or higher is installed on your computer. This is required to install all DaVinci packages and their dependencies. To check your current version of R, execute sessionInfo() within the R console.\n\n\n\nMore information on the modules and the corresponding package can be found here or in each individual package documentation.\nTo install all DaVinci packages, run the following lines of code:\n\nif (!require(\"remotes\")) install.packages(\"remotes\")\ndavinci_packages &lt;- c(\n  \"dv.filter\", \n  \"dv.loader\", \n  \"dv.manager\", \n  \"dv.bookman\", \n  \"dv.clinlines\", \n  \"dv.edish\", \n  \"dv.explorer.parameter\", \n  \"dv.listings\",\n  \"dv.papo\"\n)\n\nfor (pkg in davinci_packages) {\n  remotes::install_github(paste0(\"Boehringer-Ingelheim/\", pkg), upgrade = TRUE)\n}\n\nYou can also speed up the installation by using {pak} for installing the packages.\n\n\n\n\nIn this section, the app creation process will be explained by means of a simple, executable example.\nThe app creation process can be split into 4 steps.\n1. Loading the data\n2. Preparing the data\n3. Setting up the modules\n4. Launching the app\n\n\nFirst of all we need some data for the app. You can use the functionalities of {dv.loader} to load data from a filesystem.\n\ndata_list &lt;- dv.loader::load_data(\n  sub_dir = , # TODO: add path to your data\n  file_names = c(\"dm\", \"ae\", \"lb\")\n)\n\nTo have a running example we will use data from the {pharamversesdtm} package.\n\nif (!require(\"pharmaversesdtm\")) install.packages(\"pharmaversesdtm\")\n\ndata_list &lt;- list(\n  dm = pharmaversesdtm::dm,\n  ae = pharmaversesdtm::ae,\n  lb = pharmaversesdtm::lb\n)\n\n\n\n\nIn order to be able to use the data together with the DaVinci modules some pre-processing is needed. The modules themselves minimally handle data provisioning and derivations to ensure maximal flexibility. This assures compatibility with almost all data sources like SDTM or ADaM.\n\n# Convert data to appropriate types\ndata_list[[\"dm\"]] &lt;- dv.listings::convert_data(data_list[[\"dm\"]])\ndata_list[[\"ae\"]] &lt;- dv.listings::convert_data(data_list[[\"ae\"]])\ndata_list[[\"lb\"]] &lt;- dv.listings::convert_data(data_list[[\"lb\"]])\n\n# Assign meaningful labels to data domain names\nattributes(data_list$dm)$label &lt;- \"Subject Level\"\nattributes(data_list$ae)$label &lt;- \"Adverse Events\"\nattributes(data_list$lb)$label &lt;- \"Laboratory data\"\n\n\n\n\n\n# Specify default variables\ndefault_vars &lt;- list(\n  dm = c(\"STUDYID\", \"USUBJID\", \"SITEID\", \"ARM\"),\n  ae = c(\"STUDYID\", \"USUBJID\", \"AESOC\", \"AETERM\", \"AESTDY\", \"AEENDY\", \"AESER\"),\n  lb = c(\"STUDYID\", \"USUBJID\", \"LBTEST\", \"LBORRES\")\n)\n\n# Module list\nmodule_list &lt;- list(\n  \"Listings\" = dv.listings::mod_listings(\n    module_id = \"mod1\",\n    dataset_names = c(\"dm\", \"ae\", \"lb\"),\n    default_vars = default_vars\n  )\n)\n\nYou can add additional modules to the app by including them into the module_list. Lets add the eDISH module as well.\n\nmodule_list[[\"edish\"]] &lt;- dv.edish::mod_edish(\n    module_id = \"edish\",\n    dataset_names = c(\"dm\", \"lb\"),\n    arm_default_vals = c(\"Xanomeline Low Dose\", \"Xanomeline High Dose\"),\n    baseline_visit_val = \"SCREENING 1\"\n  )\n\n\n\n\nIn this step you combine everything and launch the app.\nYou can found more information on run_app() here\n\ndv.manager::run_app(\n  data = list(\"MyData\" = data_list),\n  module_list = module_list,\n  filter_data = \"dm\"\n)"
  },
  {
    "objectID": "quarto/getting_started.html#how-to-get-started-with-davinci",
    "href": "quarto/getting_started.html#how-to-get-started-with-davinci",
    "title": "Getting Started",
    "section": "",
    "text": "Please ensure that R version 4.0.0 or higher is installed on your computer. This is required to install all DaVinci packages and their dependencies. To check your current version of R, execute sessionInfo() within the R console.\n\n\n\nMore information on the modules and the corresponding package can be found here or in each individual package documentation.\nTo install all DaVinci packages, run the following lines of code:\n\nif (!require(\"remotes\")) install.packages(\"remotes\")\ndavinci_packages &lt;- c(\n  \"dv.filter\", \n  \"dv.loader\", \n  \"dv.manager\", \n  \"dv.bookman\", \n  \"dv.clinlines\", \n  \"dv.edish\", \n  \"dv.explorer.parameter\", \n  \"dv.listings\",\n  \"dv.papo\"\n)\n\nfor (pkg in davinci_packages) {\n  remotes::install_github(paste0(\"Boehringer-Ingelheim/\", pkg), upgrade = TRUE)\n}\n\nYou can also speed up the installation by using {pak} for installing the packages.\n\n\n\n\nIn this section, the app creation process will be explained by means of a simple, executable example.\nThe app creation process can be split into 4 steps.\n1. Loading the data\n2. Preparing the data\n3. Setting up the modules\n4. Launching the app\n\n\nFirst of all we need some data for the app. You can use the functionalities of {dv.loader} to load data from a filesystem.\n\ndata_list &lt;- dv.loader::load_data(\n  sub_dir = , # TODO: add path to your data\n  file_names = c(\"dm\", \"ae\", \"lb\")\n)\n\nTo have a running example we will use data from the {pharamversesdtm} package.\n\nif (!require(\"pharmaversesdtm\")) install.packages(\"pharmaversesdtm\")\n\ndata_list &lt;- list(\n  dm = pharmaversesdtm::dm,\n  ae = pharmaversesdtm::ae,\n  lb = pharmaversesdtm::lb\n)\n\n\n\n\nIn order to be able to use the data together with the DaVinci modules some pre-processing is needed. The modules themselves minimally handle data provisioning and derivations to ensure maximal flexibility. This assures compatibility with almost all data sources like SDTM or ADaM.\n\n# Convert data to appropriate types\ndata_list[[\"dm\"]] &lt;- dv.listings::convert_data(data_list[[\"dm\"]])\ndata_list[[\"ae\"]] &lt;- dv.listings::convert_data(data_list[[\"ae\"]])\ndata_list[[\"lb\"]] &lt;- dv.listings::convert_data(data_list[[\"lb\"]])\n\n# Assign meaningful labels to data domain names\nattributes(data_list$dm)$label &lt;- \"Subject Level\"\nattributes(data_list$ae)$label &lt;- \"Adverse Events\"\nattributes(data_list$lb)$label &lt;- \"Laboratory data\"\n\n\n\n\n\n# Specify default variables\ndefault_vars &lt;- list(\n  dm = c(\"STUDYID\", \"USUBJID\", \"SITEID\", \"ARM\"),\n  ae = c(\"STUDYID\", \"USUBJID\", \"AESOC\", \"AETERM\", \"AESTDY\", \"AEENDY\", \"AESER\"),\n  lb = c(\"STUDYID\", \"USUBJID\", \"LBTEST\", \"LBORRES\")\n)\n\n# Module list\nmodule_list &lt;- list(\n  \"Listings\" = dv.listings::mod_listings(\n    module_id = \"mod1\",\n    dataset_names = c(\"dm\", \"ae\", \"lb\"),\n    default_vars = default_vars\n  )\n)\n\nYou can add additional modules to the app by including them into the module_list. Lets add the eDISH module as well.\n\nmodule_list[[\"edish\"]] &lt;- dv.edish::mod_edish(\n    module_id = \"edish\",\n    dataset_names = c(\"dm\", \"lb\"),\n    arm_default_vals = c(\"Xanomeline Low Dose\", \"Xanomeline High Dose\"),\n    baseline_visit_val = \"SCREENING 1\"\n  )\n\n\n\n\nIn this step you combine everything and launch the app.\nYou can found more information on run_app() here\n\ndv.manager::run_app(\n  data = list(\"MyData\" = data_list),\n  module_list = module_list,\n  filter_data = \"dm\"\n)"
  },
  {
    "objectID": "quarto/modules.html",
    "href": "quarto/modules.html",
    "title": "DaVinci Modules",
    "section": "",
    "text": "The data loader supports the loading of data from a file system.\n\n\n\nThe global filter provides variable filters that can be activated and deactivated at run time by the user. It is presented at the sidebar of each DaVinci App, thus it is incorporated into the module manager. When effective, only subjects who meet the filter criteria are displayed throughout all modules.\n\n\n\nThe module manager is the heart of each DaVinci app and provides all requested outputs (also called modules), as well as meta information around the data. It takes care of jumping between modules, switching between data from different trials, and displaying a custom start-up message."
  },
  {
    "objectID": "quarto/modules.html#general-packages",
    "href": "quarto/modules.html#general-packages",
    "title": "DaVinci Modules",
    "section": "",
    "text": "The data loader supports the loading of data from a file system.\n\n\n\nThe global filter provides variable filters that can be activated and deactivated at run time by the user. It is presented at the sidebar of each DaVinci App, thus it is incorporated into the module manager. When effective, only subjects who meet the filter criteria are displayed throughout all modules.\n\n\n\nThe module manager is the heart of each DaVinci app and provides all requested outputs (also called modules), as well as meta information around the data. It takes care of jumping between modules, switching between data from different trials, and displaying a custom start-up message."
  },
  {
    "objectID": "quarto/modules.html#modules",
    "href": "quarto/modules.html#modules",
    "title": "DaVinci Modules",
    "section": "Modules",
    "text": "Modules\n\nBookmark manager by {dv.bookman}\n\n\n\n  \n    \n    \n  \n  \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n  \n  \n    \n    Previous\n  \n  \n    \n    Next\n  \n\n\nThis module lists all server-side bookmarks of a shiny application, allows to describe them and feature the most relevant ones.\n\n\n\n\nBoxplot by {dv.explorer.parameter}\n\n\n\n  \n    \n    \n    \n    \n  \n  \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n  \n  \n    \n    Previous\n  \n  \n    \n    Next\n  \n\n\nThe boxplot module allows visualizing parameter data from ADaM basic data structure as boxplots. Data can be displayed with different levels of grouping, listings with single subject data and the possibility of examining patient details other modules (e.g. Patient Profile). It also includes some statistical testing comparing the distribution of different groups.\n\n\n\n\nClinical timelines by {dv.clinlines}\n\n\n\n  \n    \n    \n    \n  \n  \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n  \n  \n    \n    Previous\n  \n  \n    \n    Next\n  \n\n\nThe Clinical Timelines module allows to display subject level data over time to present dates and/or time intervals of trial events, like adverse events, concomitant medications, randomization dates, and more.\n\n\n\n\nCorrelation heatmap by {dv.explorer.parameter}\n\n\n\n\n\n\n\n\n\nThe correlation heatmap module allows examining the correlation of several parameters using a correlation heatmap with different statistical measures.\n\n\n\n\neDISH by {dv.edish}\n\n\n\n  \n    \n    \n  \n  \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n  \n  \n    \n    Previous\n  \n  \n    \n    Next\n  \n\n\nThe eDISH module is meant to support the assessment of drug-induced liver injury by means of the (modified) evaluation of Drug-Induced Serious Hepatotoxicity plot.\n\n\n\n\nForest plot by {dv.explorer.parameter}\n\n\n\n\n\n\n\n\n\nThe forest plot module allows examining the correlation of several parameters with a continuous variable in the form of a forest plot. Several correlation measures and groupings are available.\n\n\n\n\nLine plot by {dv.explorer.parameter}\n\n\n\n\n\n\n\n\n\nThe lineplot module allows examining the evolution of parameter values using lineplots with different levels of grouping and aggregation measures.\n\n\n\n\nListings by {dv.listings}\n\n\n\n  \n    \n    \n    \n  \n  \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n  \n  \n    \n    Previous\n  \n  \n    \n    Next\n  \n\n\nThe listings module displays arbitrary datasets as listings. Users can select the dataset to be shown, and specify which columns of the dataset should be displayed as well as their order. The displayed columns can be sorted and filtered. Moreover, the table can be filtered to show only entries containing a keyword entered by the user. The module is not limited to usage of one data source, most notably, it can handle data from ADaM or SDTM.\n\n\n\n\nPatient profile by {dv.papo}\n\n\n\n  \n    \n    \n    \n  \n  \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n  \n  \n    \n    Previous\n  \n  \n    \n    Next\n  \n\n\nThe Patient Profile module allows to display subject level information and subject related data listings as well as plots for adverse events, concomitant medications, lab values, and vital signs over time.\n\n\n\n\nROC by {dv.explorer.parameter}\n\n\n\n  \n    \n    \n    \n    \n    \n    \n    \n  \n  \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n    \n      \n        \n          \n        \n      \n      \n        \n      \n    \n  \n  \n    \n    Previous\n  \n  \n    \n    Next\n  \n\n\nThe ROC module makes it possible to visualize a set of ROC related charts, or tables, and compare independent ROC curves for different continuous parameters with respect to a single binary endpoint. This allows a user to evaluate how predictive is a continuous parameter of binary endpoint.\n\n\n\n\nScatter plot by {dv.explorer.parameter}\n\n\n\n\n\n\n\n\n\nThe scatterplot module makes it possible to visualize a scatterplot of two biomarkers with different levels of grouping.\n\n\n\n\nScatter plot matrix by {dv.explorer.parameter}\n\n\n\n\n\n\n\n\n\nThe scatter module allows examining the correlation of several parameters using a scatterplot matrix with different levels of grouping.\n\n\n\n\nWaterfall plus heatmap by {dv.explorer.parameter}\n\n\n\n\n\n\n\n\n\nThe Waterfall plus heatmap module package includes a waterfall plot and aligned categorical continuous and parameter heatmaps."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "How to get in contact?"
  }
]